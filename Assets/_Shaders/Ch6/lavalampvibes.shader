// Upgrade NOTE: replaced 'mul(UNITY_MATRIX_MVP,*)' with 'UnityObjectToClipPos(*)'

Shader "CookbookShaders/Ch06/lavalampvibes" 
{
	Properties
	{
		_NoiseTexture ("Noise Texture", 2D) = "white" {}
		_Color ("Color", Color) = (1, 1, 1, 1)

		_Period ("Period", Range(0.001, 50)) = 5
		_Magnitude ("Magnitude", Range(0, 5)) = 1
		_Scale ("Scale", Range(0.001, 2)) = 0.1

		_MovementX ("Movement X", Range(-3, 3)) = 0
		_MovementY ("Movement Y", Range(-3, 3)) = 1

		_ScrollX ("Scroll X", Range(-3, 3)) = 0
		_ScrollY ("Scroll Y", Range(-3, 3)) = 1
	}

	SubShader
	{
		Tags
		{
			"Queue" = "Transparent"
			"IgnoreProjector" = "True"
			"RenderType" = "Transparent"
		}

		ZWrite On Lighting Off Cull Off Fog{ Mode Off } Blend One Zero

		GrabPass {}	// first pass is a grab pass

		Pass		// rest of the code is in the second pass
		{
			CGPROGRAM

			#pragma vertex vert
			#pragma fragment frag
			#include "UnityCG.cginc"

			sampler2D _GrabTexture;	// automatically generated by the GrabPass

			sampler2D _NoiseTexture;
			fixed4 _Color;
			
			float _Period;
			float _Magnitude;
			float _Scale;
			
			float _MovementX;
			float _MovementY;

			float _ScrollX;
			float _ScrollY;

			#define M_PI 3.1415926535897932384626433832795

			struct vertInput
			{
				float4 vertex : POSITION;
				float4 color : COLOR;
				float2 texcoord : TEXCOORD0;
			};

			struct vertOutput
			{
				float4 vertex : POSITION;
				fixed4 color : COLOR;
				float2 texcoord : TEXCOORD0;

				float4 worldPos : TEXCOORD1;
				float4 uvgrab : TEXCOORD2;
			};
			
			// Vertex function 
			vertOutput vert(vertInput v)
			{
				vertOutput o;
				o.vertex = UnityObjectToClipPos(v.vertex);
				o.color = v.color;
				o.texcoord = v.texcoord;
				
				o.worldPos = mul(unity_ObjectToWorld, v.vertex);	// need to know the position of every fragment
				o.uvgrab = ComputeGrabScreenPos(o.vertex);	// grab screen texture

				return o;
			}
			
			// Fragment function
			half4 frag(vertOutput i) : COLOR
			{
				//_Period /= 3;

				float time = _Time.y / _Period; //(_Time.y - floor(_Time.y / _Period) * _Period) / _Period;

				float sinT = sin(time);
				float cosT = cos(time);

				float2 distortion = float2
				(
					tex2D(_NoiseTexture, i.worldPos.xy / _Scale + float2(_ScrollX * sinT, _ScrollY * sinT) ).r - 0.5,
					tex2D(_NoiseTexture, i.worldPos.xy / _Scale + float2(_MovementX * sinT, _MovementY * sinT) ).r - 0.5
				);
				i.uvgrab.xy += (1 + sinT * 0.5) * distortion * _Magnitude;

				fixed4 col = tex2Dproj(_GrabTexture, UNITY_PROJ_COORD(i.uvgrab));
				return col * _Color;
			}

			ENDCG
		}
	}
}